{"version":3,"sources":["Components/NavHead.js","Components/Searchbar.js","Components/Pins.js","Components/Cats.js","Components/Watercolors.js","Components/Design.js","Components/Art.js","App.js","Components/Fetch.js","serviceWorker.js","index.js"],"names":["NavHead","react_default","a","createElement","SearchBar","Component","state","inputText","amount","apiUrl","apiKey","pins","open","currentImg","handleOpen","pin","_this","setState","onTextChange","e","input","target","value","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","console","log","_this2","this","_this3","_this4","_this5","_this6","onChange","onClick","changeW","bind","changedesign","changearch","className","map","href","class","webformatURL","src","id","alt","style","width","App","Components_NavHead","Searchbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20c52cba.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst NavHead =()=>{\r\n\r\n  return (\r\n\r\n    <div>\r\n    <h1> Pinterest ft. React + Pixabay </h1>\r\n  \r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default NavHead;","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport LoadPins from './Pins'\r\nimport Cats from './Cats'\r\nimport Watercolors from './Watercolors'\r\nimport Design from './Design';\r\nimport Art from './Art'\r\n\r\nclass SearchBar extends Component {\r\n\r\n  state = {\r\n    inputText: '',\r\n    amount: 100,\r\n    apiUrl: 'https://pixabay.com/api/',\r\n    apiKey: '1721901-fa9bcc6ed3f879da0567a53bb',\r\n    pins: [],\r\n    open: false,\r\n    currentImg: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n      .get(\r\n        `${this.state.apiUrl}/?key=${this.state.apiKey}&q=watercolor&orientation=vertical&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n      .then(res => this.setState({ pins: res.data.hits }))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  handleOpen = pin => {\r\n    this.setState({ open: true, currentImg: pin });\r\n  };\r\n\r\n  changeW() {\r\n    axios\r\n      .get(\r\n        `${this.state.apiUrl}/?key=${this.state.apiKey}&q=watercolors&orientation=vertical&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n      .then(res => this.setState({ pins: res.data.hits }))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  changedesign() {\r\n    axios\r\n      .get(\r\n        `${this.state.apiUrl}/?key=${this.state.apiKey}&q=creative&orientation=vertical&image_type=photon&per_page=${this.state.amount}&order=popular&safesearch=true`)\r\n      .then(res => this.setState({ pins: res.data.hits }))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  changearch() {\r\n    axios\r\n      .get(\r\n        `${this.state.apiUrl}/?key=${this.state.apiKey}&q=architecture&orientation=vertical&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n      .then(res => this.setState({ pins: res.data.hits }))\r\n      .catch(err => console.log(err));\r\n\r\n  }\r\n\r\n  onTextChange = e => {\r\n    const input = e.target.value;\r\n    this.setState({ [e.target.name]: input }, () => {\r\n      if (input === '') {\r\n        axios\r\n          .get(\r\n            `${this.state.apiUrl}/?key=${this.state.apiKey}&q=watercolor&orientation=vertical&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n          .then(res => this.setState({ pins: res.data.hits }))\r\n          .catch(err => console.log(err));\r\n      } else {\r\n        axios\r\n          .get(\r\n            `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.inputText}&orientation=vertical&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n          .then(res => this.setState({ pins: res.data.hits }))\r\n          .catch(err => console.log(err));\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state.pins);\r\n    let { pins } = this.state;\r\n    return (\r\n      <div>\r\n        <input name=\"inputText\" value={this.state.inputText} onChange={this.onTextChange} />\r\n        <div>\r\n          <button onClick={this.changeW.bind(this)}>inicio</button>\r\n          <button onClick={this.changedesign.bind(this)}>Design</button>\r\n          <button onClick={this.changearch.bind(this)}>Architecture</button>\r\n          <div className=\"row\">\r\n            {pins.map(pin => (\r\n              <div className=\"column\">\r\n              <a href=\"#popup\" class=\"popup-link\" onClick={() => this.handleOpen(pin.webformatURL)} >\r\n                <img src={pin.webformatURL} />\r\n                </a>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n        <div>\r\n        </div>\r\n\r\n        <div class=\"modal-wrapper\" id=\"popup\">\r\n          <div class=\"popup-contenedor\">\r\n          <img src={this.state.currentImg} alt=\"\" style={{ width: '50%' }} />\r\n            <a class=\"popup-cerrar\" href=\"#\">X</a>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass LoadPins extends Component {\r\n\r\n  state = {\r\n    open: false,\r\n    currentImg: ''\r\n  };\r\n\r\n  handleOpen = img => {\r\n    this.setState({ open: true, currentImg: img });\r\n  };\r\n\r\n  render() {\r\n    let imageListContent;\r\n    const { pins } = this.props;\r\n\r\n    if (pins) {\r\n      imageListContent = (\r\n        <div className=\"row\">\r\n          {pins.map(img => (\r\n            <div className=\"column\">\r\n              <a href=\"#popup\" class=\"popup-link\" onClick={() => this.handleOpen(img.webformatURL)} > <img src={img.webformatURL} alt=\"\" />\r\n              </a>\r\n            </div>\r\n\r\n          ))}\r\n        </div>\r\n      );\r\n    } else {\r\n      imageListContent = null;\r\n    }\r\n    return (\r\n      <div>\r\n        <div>\r\n          {imageListContent}\r\n        </div>\r\n        <div class=\"modal-wrapper\" id=\"popup\">\r\n          <div class=\"popup-contenedor\">\r\n          <img src={this.state.currentImg} alt=\"\" style={{ width: '50%' }} />\r\n          <div>\r\n          {imageListContent}\r\n        </div>\r\n\r\n            <a class=\"popup-cerrar\" href=\"#\">X</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLoadPins.propTypes = {\r\n  pins: PropTypes.array.isRequired\r\n};\r\n\r\nexport default LoadPins;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport SearchBar from './Searchbar'\r\n\r\nclass Cats extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n    inputText: '',\r\n    amount: 15,\r\n    apiUrl: 'https://pixabay.com/api/',\r\n    apiKey: '1721901-fa9bcc6ed3f879da0567a53bb',\r\n    pins: []\r\n  };\r\n\r\n};\r\n\r\n\r\nchangeGallery(){\r\n  axios\r\n    .get(\r\n      `${this.state.apiUrl}/?key=${this.state.apiKey}&q=cats&orientation=vertical&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n    .then(res => this.setState({ pins: res.data.hits }))\r\n    .catch(err => console.log(err));\r\n\r\n\r\n}\r\n\r\n\r\n\r\n render(){\r\n  let { pins } = this.state;\r\n  return (\r\n    <div>\r\n      <button onClick={this.changeGallery.bind(this)}>Gatos</button>\r\n    <div className =\"row\">\r\n     {pins.map(pin =>( \r\n       <div className=\"column\">\r\n       <img src={pin.webformatURL}/>\r\n       </div>\r\n     ))}\r\n    </div>\r\n    </div>\r\n\r\n  );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Cats;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport SearchBar from './Searchbar'\r\n\r\nclass Watercolors extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n    inputText: '',\r\n    amount: 150,\r\n    apiUrl: 'https://pixabay.com/api/',\r\n    apiKey: '1721901-fa9bcc6ed3f879da0567a53bb',\r\n    pins: []\r\n  };\r\n\r\n};\r\n\r\n\r\nchangeW(){\r\n  axios\r\n    .get(\r\n      `${this.state.apiUrl}/?key=${this.state.apiKey}&q=watercolors&orientation=vertical&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n    .then(res => this.setState({ pins: res.data.hits }))\r\n    .catch(err => console.log(err));\r\n\r\n\r\n}\r\n\r\n\r\n render(){\r\n  let { pins } = this.state;\r\n\r\n  return (\r\n    <div>\r\n    <button onClick={this.changeW.bind(this)}>inicio</button>\r\n    <div className =\"row\">\r\n     {pins.map(pin =>( \r\n       <div className=\"column\">\r\n       <img src={pin.webformatURL}/>\r\n       </div>\r\n     ))}\r\n    </div>\r\n    </div>\r\n\r\n  );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Watercolors;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\n\r\n\r\nclass Design extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n    inputText: '',\r\n    amount: 150,\r\n    apiUrl: 'https://pixabay.com/api/',\r\n    apiKey: '1721901-fa9bcc6ed3f879da0567a53bb',\r\n    pins: []\r\n  };\r\n\r\n};\r\n\r\n\r\nchangeGallery(){\r\n  axios\r\n    .get(\r\n      `${this.state.apiUrl}/?key=${this.state.apiKey}&q=design&orientation=vertical&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n    .then(res => this.setState({ pins: res.data.hits }))\r\n    .catch(err => console.log(err));\r\n\r\n\r\n}\r\n\r\n\r\n\r\n render(){\r\n  let { pins } = this.state;\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={this.changeGallery.bind(this)}>diseño</button>\r\n    <div className =\"row\">\r\n     {pins.map(pin =>( \r\n       <div className=\"column\">\r\n       <img src={pin.webformatURL}/>\r\n       </div>\r\n     ))}\r\n    </div>\r\n    </div>\r\n\r\n  );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Design;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\n\r\n\r\nclass Art extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n    inputText: '',\r\n    amount: 150,\r\n    apiUrl: 'https://pixabay.com/api/',\r\n    apiKey: '1721901-fa9bcc6ed3f879da0567a53bb',\r\n    pins: []\r\n  };\r\n\r\n};\r\n\r\nchangeGallery(){\r\n  axios\r\n    .get(\r\n      `${this.state.apiUrl}/?key=${this.state.apiKey}&q=Art&orientation=vertical&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n    .then(res => this.setState({ pins: res.data.hits }))\r\n    .catch(err => console.log(err));\r\n\r\n}\r\n\r\n\r\n render(){\r\n  let { pins } = this.state;\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={this.changeGallery.bind(this)}>Art</button>\r\n    <div className =\"row\">\r\n     {pins.map(pin =>( \r\n       <div className=\"column\">\r\n       <img src={pin.webformatURL}/>\r\n       </div>\r\n     ))}\r\n    </div>\r\n    </div>\r\n\r\n  );\r\n  }\r\n  \r\n}\r\n\r\nexport default Art;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport NavHead from './Components/NavHead'\nimport SearchBar from './Components/Searchbar'\nimport LoadPins from './Components/Pins'\nimport Exp from './Components/Fetch'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n      <div>\n     <NavHead />\n     <SearchBar />\n\n\n     </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\n\r\n\r\nclass Exp extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pins: [],\r\n      load: false\r\n    }\r\n  }\r\n  \r\n\r\n    componentDidMount() {\r\n\r\n      fetch('')\r\n        .then(resp => resp.json())\r\n        .then(json => {\r\n          this.setState({\r\n            load: true,\r\n            pins: json\r\n          })\r\n        })\r\n    }\r\n \r\n\r\n  render() {\r\n    let { pins } = this.state;\r\n\r\n    return (\r\n      <div className =\"row\">\r\n       {pins.map(pin =>( \r\n         <div className=\"column\">\r\n         <img src={pin.webformatURL}/>\r\n         <button>pin it!</button>\r\n         </div>\r\n       ))}\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Exp;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}