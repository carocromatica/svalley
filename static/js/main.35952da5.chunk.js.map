{"version":3,"sources":["Components/NavHead.js","Components/Pins.js","Components/Searchbar.js","App.js","serviceWorker.js","index.js"],"names":["NavHead","react_default","a","createElement","LoadPins","imageListContent","pins","this","props","className","map","img","href","class","src","webformatURL","alt","tags","id","Component","SearchBar","state","inputText","amount","apiUrl","apiKey","onTextChange","e","input","target","value","_this","setState","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","console","log","_this2","onChange","Pins","App","Components_NavHead","Searchbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35952da5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst NavHead =()=>{\r\n\r\n  return (\r\n    <h1> holi soy en navheader </h1>\r\n  )\r\n\r\n}\r\n\r\nexport default NavHead;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass LoadPins extends Component {\r\n\r\n  render() {\r\n    let imageListContent;\r\n    const { pins } = this.props;\r\n\r\n    if (pins) {\r\n      imageListContent = (\r\n        <div className=\"row\">\r\n          {pins.map(img => (\r\n            <div className=\"column\">\r\n              <a href=\"#popup\" class=\"popup-link\"> <img src={img.webformatURL} alt=\"\" />\r\n              </a><p>{img.tags}</p>\r\n            </div>\r\n\r\n          ))}\r\n        </div>\r\n      );\r\n    } else {\r\n      imageListContent = null;\r\n    }\r\n    return (\r\n      <div>\r\n        <div>\r\n          {imageListContent}\r\n        </div>\r\n        <div class=\"modal-wrapper\" id=\"popup\">\r\n          <div class=\"popup-contenedor\">\r\n            <h2>Titulo de la Modal</h2>\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolor deleniti...</p>\r\n            <a class=\"popup-cerrar\" href=\"#\">X</a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLoadPins.propTypes = {\r\n  pins: PropTypes.array.isRequired\r\n};\r\n\r\nexport default LoadPins;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport LoadPins from './Pins'\r\n\r\nclass SearchBar extends Component {\r\n\r\n  state = {\r\n    inputText: '',\r\n    amount: 200,\r\n    apiUrl: 'https://pixabay.com/api/',\r\n    apiKey: '1721901-fa9bcc6ed3f879da0567a53bb',\r\n    pins: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    axios\r\n    .get(\r\n      `${this.state.apiUrl}/?key=${this.state.apiKey}&q=watercolor&orientation=vertical&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n    .then(res => this.setState({ pins: res.data.hits }))\r\n    .catch(err => console.log(err));\r\n  }\r\n\r\n  onTextChange = e => {\r\n    const input = e.target.value;\r\n    this.setState({ [e.target.name]: input }, () => {\r\n      if (input === '') {\r\n        axios\r\n          .get(\r\n            `${this.state.apiUrl}/?key=${this.state.apiKey}&q=watercolor&orientation=vertical&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n          .then(res => this.setState({ pins: res.data.hits }))\r\n          .catch(err => console.log(err));\r\n      } else {\r\n        axios\r\n          .get(\r\n            `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.inputText}&orientation=vertical&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\r\n          .then(res => this.setState({ pins: res.data.hits }))\r\n          .catch(err => console.log(err));\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(this.state.pins);\r\n    return (\r\n      <div>\r\n        <input\r\n          name=\"inputText\" value={this.state.inputText} onChange={this.onTextChange} />\r\n        <LoadPins pins={this.state.pins} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport NavHead from './Components/NavHead'\nimport SearchBar from './Components/Searchbar'\nimport LoadPins from './Components/Pins'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n      <div>\n     <NavHead />\n     <SearchBar />\n     <LoadPins />\n     </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}