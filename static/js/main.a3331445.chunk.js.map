{"version":3,"sources":["Components/Fetch.js","Components/NavHead.js","Components/Searchbar.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Exp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pins","load","_this2","fetch","then","resp","json","setState","react_default","a","createElement","className","map","pin","src","thumbnailUrl","title","Component","NavHead","SearchBar","inputText","amount","apiUrl","apiKey","name","value","onChange","onTextChange","type","placeholder","MainApp","Components_NavHead","Searchbar","App","Main","Fetch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNA4CeA,qBAvCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,GACNC,MAAM,GAJST,mFAQG,IAAAU,EAAAP,KAElBQ,MAAM,+CACHC,KAAK,SAAAC,GAAI,OAAIA,EAAKC,SAClBF,KAAK,SAAAE,GACJJ,EAAKK,SAAS,CACZN,MAAM,EACND,KAAMM,uCAMP,IACDN,EAASL,KAAKI,MAAdC,KAEN,OACEQ,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACdX,EAAKY,IAAI,SAAAC,GAAG,OACXL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAAA,OAAKI,IAAKD,EAAIE,eACdP,EAAAC,EAAAC,cAAA,SAAIG,EAAIG,OACRR,EAAAC,EAAAC,cAAA,oCAhCSO,cCOHC,EARA,WAEb,OACEV,EAAAC,EAAAC,cAAA,sCCsBWS,6MAtBfpB,MAAO,CACLqB,UAAU,GACVC,OAAO,GACPC,OAAO,2BACPC,OAAO,oCACPvB,KAAK,4EAIH,OACEQ,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,SAAOc,KAAK,YAAYC,MAAO9B,KAAKI,MAAMqB,UAC1CM,SAAU/B,KAAKgC,aAEfC,KAAK,OAAOC,YAAY,0BAjBRZ,aCcTa,mLAXX,OACEtB,EAAAC,EAAAC,cAAA,WACDF,EAAAC,EAAAC,cAACqB,EAAD,MAEAvB,EAAAC,EAAAC,cAACsB,EAAD,cANiBf,aCcPgB,mLAXX,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACCF,EAAAC,EAAAC,cAACwB,EAAD,OAED1B,EAAAC,EAAAC,cAACyB,EAAD,cAPUlB,aCKEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,KAAK,SAAA6C,GACjCA,EAAaC","file":"static/js/main.a3331445.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass Exp extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pins: [],\r\n      load: false\r\n    }\r\n  }\r\n\r\n    componentDidMount() {\r\n\r\n      fetch('https://jsonplaceholder.typicode.com/photos')\r\n        .then(resp => resp.json())\r\n        .then(json => {\r\n          this.setState({\r\n            load: true,\r\n            pins: json\r\n          })\r\n        })\r\n    }\r\n \r\n\r\n  render() {\r\n    let { pins } = this.state;\r\n\r\n    return (\r\n      <div className =\"row\">\r\n       {pins.map(pin =>( \r\n         <div className=\"column\">\r\n         <img src={pin.thumbnailUrl}/>\r\n         <p>{pin.title}</p>\r\n         <button>pin it!</button>\r\n         </div>\r\n       ))}\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Exp;\r\n","import React from 'react'\r\n\r\nconst NavHead =()=>{\r\n\r\n  return (\r\n    <h1> holi soy en navheader </h1>\r\n  )\r\n\r\n}\r\n\r\nexport default NavHead;","import React, { Component } from 'react';\r\n\r\n\r\nclass SearchBar extends Component {\r\n\r\nstate ={\r\n  inputText:'',\r\n  amount:15,\r\n  apiUrl:'https://pixabay.com/api/',\r\n  apiKey:'1721901-fa9bcc6ed3f879da0567a53bb',\r\n  pins:[]\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        \r\n        <input name=\"inputText\" value={this.state.inputText} \r\n        onChange={this.onTextChange} \r\n        \r\n        type=\"text\" placeholder=\"BÃºsqueda..\"/>\r\n      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from 'react';\r\nimport NavHead from './NavHead';\r\nimport SearchBar from './Searchbar';\r\n\r\nclass MainApp extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n     <NavHead />\r\n   \r\n     <SearchBar />\r\n    \r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MainApp;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Exp from './Components/Fetch'\nimport MainApp from './Components/Main'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n         <MainApp />\n        </header>\n        <Exp />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}